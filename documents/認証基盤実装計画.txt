# 認証基盤実装計画

## 1. 環境構築（完了）
- [x] PostgreSQLのセットアップ
- [x] 必要なパッケージのインストール
  - next-auth@beta
  - @prisma/client
  - bcryptjs
  - zod（バリデーション用）
  - prisma（開発用）
  - @types/bcryptjs（型定義）

## 2. Prismaセットアップ
### 2.1 初期化
```bash
npx prisma init
```

### 2.2 スキーマ定義
```prisma
// prisma/schema.prisma
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  name          String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}
```

### 2.3 マイグレーション
```bash
npx prisma migrate dev --name init
```

## 3. NextAuth.js設定
### 3.1 環境変数の設定
```env
# .env
DATABASE_URL="postgresql://ourhousework_user:our_password@localhost:5432/ourhousework_dev"
NEXTAUTH_SECRET="生成した安全な文字列"
NEXTAUTH_URL="http://localhost:3000"
```

### 3.2 認証設定ファイルの作成
- app/api/auth/[...nextauth]/route.ts
  - CredentialsProviderの設定
  - セッション設定
  - コールバック設定

### 3.3 型定義の拡張
- types/next-auth.d.ts
  - セッションの型定義
  - ユーザーの型定義

## 4. 認証APIの実装
### 4.1 サインアップAPI
- エンドポイント: /api/auth/signup
- 機能:
  - メールアドレスの重複チェック
  - パスワードのバリデーション
    - 8文字以上
    - 大文字小文字混在
  - パスワードのハッシュ化
  - ユーザー作成

### 4.2 サインインAPI
- NextAuth.jsのCredentialsProviderを使用
- 機能:
  - メールアドレス存在確認
  - パスワード照合
  - JWTトークン生成

## 5. フロントエンド連携
### 5.1 共通コンポーネント
- AuthProvider
  - セッション管理
  - 認証状態の共有

### 5.2 サインアップページ
- バリデーション追加
- エラーハンドリング
- ローディング状態
- 成功時のリダイレクト

### 5.3 サインインページ
- バリデーション追加
- エラーハンドリング
- ローディング状態
- 成功時のリダイレクト

## 6. 認証ミドルウェア
### 6.1 ミドルウェアの実装
- middleware.ts
  - 保護されたルートの設定
  - 認証状態チェック
  - リダイレクト制御

### 6.2 保護されたルート
- /main/*
- /api/* (認証関連以外)

## 7. エラーハンドリング
### 7.1 バックエンド
- カスタムエラークラス
- エラーメッセージの定義
- ログ出力設定

### 7.2 フロントエンド
- エラーメッセージの表示
- トースト通知
- フォームエラーの表示

## 8. テスト実装
### 8.1 単体テスト
- バリデーション
- パスワードハッシュ化
- トークン生成

### 8.2 統合テスト
- サインアップフロー
- サインインフロー
- 保護されたルート

## 実装の順序
1. Prismaセットアップ
2. NextAuth.js基本設定
3. サインアップAPI実装
4. サインインAPI実装
5. フロントエンド連携
6. ミドルウェア実装
7. エラーハンドリング
8. テスト実装

## 注意点
1. セキュリティ
   - パスワードは常にハッシュ化
   - CSRF対策の実装
   - Rate Limitingの設定

2. パフォーマンス
   - データベースインデックスの適切な設定
   - キャッシュ戦略の検討

3. UX
   - 適切なエラーメッセージ
   - ローディング状態の表示
   - スムーズな画面遷移 